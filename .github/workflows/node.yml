name: Node CI

on:
  push:
    branches:
      - "**"
    tags:
      - "v**"
  pull_request:

jobs:
  lint-core:
    name: Typecheck and Lint Core
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/setup-meteor
      - name: restore node_modules
        uses: actions/cache@v2
        with:
          path: |
            meteor/node_modules
          key: ${{ runner.os }}-${{ hashFiles('meteor/package-lock.json') }}-${{ hashFiles('meteor/.meteor/release') }}
      - name: Prepare Environment
        run: |
          yarn
          yarn build:packages
        env:
          CI: true
      - name: Run typecheck and linter
        run: |
          cd meteor
          meteor npm run ci:lint
        env:
          CI: true
  test-core:
    name: Test Core
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/setup-meteor
      - name: restore node_modules
        uses: actions/cache@v2
        with:
          path: |
            meteor/node_modules
          key: ${{ runner.os }}-${{ hashFiles('meteor/package-lock.json') }}-${{ hashFiles('meteor/.meteor/release') }}
      - name: Prepare Environment
        run: |
          yarn
          yarn build:packages
        env:
          CI: true
      - name: Run Tests
        run: |
          cd meteor
          meteor npm run ci
        env:
          CI: true

  validate-prod-dependencies-core:
    name: Validate Core production dependencies
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/setup-meteor
      - name: restore node_modules
        uses: actions/cache@v2
        with:
          path: |
            meteor/node_modules
          key: ${{ runner.os }}-${{ hashFiles('meteor/package-lock.json') }}-${{ hashFiles('meteor/.meteor/release') }}
      - name: Validate production dependencies for vulnerabilities and compatible licenses
        run: |
          yarn
          cd meteor
          meteor npm run validate:prod-dependencies
        env:
          CI: true
  validate-all-dependencies-core:
    name: Validate all Core dependencies
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/setup-meteor
      - name: restore node_modules
        uses: actions/cache@v2
        with:
          path: |
            meteor/node_modules
          key: ${{ runner.os }}-${{ hashFiles('meteor/package-lock.json') }}-${{ hashFiles('meteor/.meteor/release') }}
      - name: Validate all dependencies for vulnerabilities
        run: |
          yarn
          cd meteor
          meteor npm run validate:all-dependencies
        env:
          CI: true
  build-core:
    # TODO - should this be dependant on tests or something passing if we are on a tag?
    name: Build Core and publish docker image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: Get the Docker tag
        id: docker-tag
        uses: yuya-takeyama/docker-tag-from-github-ref-action@2b0614b1338c8f19dd9d3ea433ca9bc0cc7057ba
        with:
          remove-version-tag-prefix: false
      - name: Determine images to publish
        id: image-tags
        run: |
          IMAGES=
          DOCKER_TAG=${{ steps.docker-tag.outputs.tag }}
          # check if a release branch, or master, or a tag
          if [[ $DOCKER_TAG =~ ^release([0-9]+)$ || $DOCKER_TAG == "latest" || "${{ github.ref }}" == refs/tags/* ]]
          then
            # If we have a dockerhub image name, then setup to publish there
            if [ -z "${{ secrets.DOCKERHUB_IMAGE_PREFIX }}" ]
            then
              DOCKERHUB_PUBLISH="0"
            else
              DOCKERHUB_PUBLISH="1"
              IMAGES="${{ secrets.DOCKERHUB_IMAGE_PREFIX }}server-core:$DOCKER_TAG"$'\n'$IMAGES
            fi
            # debug output
            echo dockerhub-publish $DOCKERHUB_PUBLISH
            echo images $IMAGES
            echo ::set-output name=images::"$IMAGES"
            echo ::set-output name=dockerhub-publish::"$DOCKERHUB_PUBLISH"
          else
            echo "Skipping docker build"
          fi
      - uses: ./.github/actions/setup-meteor
        if: ${{ steps.image-tags.outputs.images }}
      - name: Prepare Environment
        if: ${{ steps.image-tags.outputs.images }}
        run: |
          yarn install
      - name: Build libs
        if: ${{ steps.image-tags.outputs.images }}
        run: |
          yarn build:packages
      - name: Meteor Build
        if: ${{ steps.image-tags.outputs.images }}
        run: |
          cd meteor
          NODE_OPTIONS="--max-old-space-size=4096" METEOR_DEBUG_BUILD=1 meteor build --allow-superuser --directory .
      - name: Meteor Bundle NPM Build
        if: ${{ steps.image-tags.outputs.images }}
        run: |
          cd meteor/bundle/programs/server
          meteor npm install
      - name: Set up Docker Buildx
        if: ${{ steps.image-tags.outputs.images }}
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: steps.image-tags.outputs.images && steps.image-tags.outputs.dockerhub-publish == '1'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # TODO - do we want this?
      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v1
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.repository_owner }}
      #     password: ${{ secrets.CR_PAT }}
      - name: Build and push
        uses: docker/build-push-action@v2
        if: ${{ steps.image-tags.outputs.images }}
        with:
          context: .
          file: ./meteor/Dockerfile.circle
          push: true
          tags: ${{ steps.image-tags.outputs.images }}

  lint-packages:
    name: Lint Package
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        package-name:
          [
            blueprints-integration,
            server-core-integration
          ]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Prepare Environment
        run: |
          cd packages 
          yarn install
          yarn lerna run --scope \*\*/${{ matrix.package-name }} --include-dependencies --stream build
        env:
          CI: true
      - name: Run typecheck and linter
        run: |
          cd packages/${{ matrix.package-name }}
          yarn lint
        env:
          CI: true

  test-packages:
    name: Test Package
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        package-name: [blueprints-integration, server-core-integration]
        node-version: [12.x, 14.x]

    # Gateways dont support node 10. but no tests to run anyway :)
    # if: "!(endsWith(matrix.package-name, 'gateway') & matrix.node-version == '10.x')"

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Prepare Environment
        run: |
          cd packages 
          yarn install
          yarn lerna run --scope \*\*/${{ matrix.package-name }} --include-dependencies --stream build
        env:
          CI: true
      - name: Run tests
        run: |
          cd packages/${{ matrix.package-name }}
          yarn unit
        env:
          CI: true
      - name: Send coverage
        if: matrix.node-version == '12.x'
        run: |
          cd packages/${{ matrix.package-name }}
          yarn send-coverage
        env:
          CI: true

  validate-prod-dependencies-packages:
    name: Validate Package production dependencies
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        package-name:
          [
            blueprints-integration,
            server-core-integration
          ]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Prepare Environment
        run: |
          cd packages 
          yarn install
        env:
          CI: true
      - name: Validate production dependencies
        run: |
          cd packages/${{ matrix.package-name }}
          if ! git log --format=oneline -n 1 | grep -q "\[ignore-audit\]"; then
            yarn validate:dependencies
          else
            echo "Skipping audit"
          fi
        env:
          CI: true

  validate-all-dependencies-packages:
    name: Validate all Package dependencies
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Prepare Environment
        run: |
          cd packages
          yarn install
        env:
          CI: true
      - name: Validate production dependencies
        run: |
          cd packages
          yarn validate:dependencies
        env:
          CI: true
      - name: Validate dev dependencies
        run: |
          cd packages
          yarn validate:dev-dependencies
        env:
          CI: true